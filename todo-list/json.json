TruffleContract {
    constructor: [Function: TruffleContract] {
      _constructorMethods: {
        configureNetwork: [Function: configureNetwork],
        setProvider: [Function: setProvider],
        new: [Function: new],
        at: [AsyncFunction: at],
        deployed: [AsyncFunction: deployed],
        defaults: [Function: defaults],
        hasNetwork: [Function: hasNetwork],
        isDeployed: [Function: isDeployed],
        detectNetwork: [AsyncFunction: detectNetwork], 
        setNetwork: [Function: setNetwork],
        setNetworkType: [Function: setNetworkType],    
        setWallet: [Function: setWallet],
        resetAddress: [Function: resetAddress],
        link: [Function: link],
        clone: [Function: clone],
        addProp: [Function: addProp],
        toJSON: [Function: toJSON],
        decodeLogs: [Function: decodeLogs]
      },
      _properties: {
        contract_name: [Object],
        contractName: [Object],
        gasMultiplier: [Object],
        timeoutBlocks: [Object],
        autoGas: [Object],
        numberFormat: [Object],
        abi: [Object],
        metadata: [Function: metadata],
        network: [Function: network],
        networks: [Function: networks],
        address: [Object],
        transactionHash: [Object],
        links: [Function: links],
        events: [Function: events],
        binary: [Function: binary],
        deployedBinary: [Function: deployedBinary],
        unlinked_binary: [Object],
        bytecode: [Object],
        deployedBytecode: [Object],
        sourceMap: [Object],
        deployedSourceMap: [Object],
        source: [Object],
        sourcePath: [Object],
        legacyAST: [Object],
        ast: [Object],
        compiler: [Object],
        schema_version: [Function: schema_version],
        schemaVersion: [Function: schemaVersion],
        updated_at: [Function: updated_at],
        updatedAt: [Function: updatedAt],
        userdoc: [Function: userdoc],
        devdoc: [Function: devdoc],
        networkType: [Object],
        immutableReferences: [Object],
        generatedSources: [Object],
        deployedGeneratedSources: [Object],
        db: [Object]
      },
      _property_values: {},
      _json: {
        contractName: 'TodoList',
        abi: [Array],
        metadata: '{"compiler":{"version":"0.8.11+commit.d7f03943"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"string","name":"content","type":"string"},{"indexed":false,"internalType":"bool","name":"completed","type":"bool"}],"name":"TaskCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"bool","name":"completed","type":"bool"}],"name":"TaskToggled","type":"event"},{"inputs":[{"internalType":"string","name":"_content","type":"string"}],"name":"createTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tasks","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"content","type":"string"},{"internalType":"bool","name":"completed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tasksCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"toggleCompleted","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"project:/contracts/TodoList.sol":"TodoList"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"project:/contracts/TodoList.sol":{"keccak256":"0x79a50c027ea626098300f6abf729387299b484919e7cd4291f82ec39dd87f734","license":"MIT","urls":["bzz-raw://abcc1453f50436d4bf0a60912365ca2d419a884413b1c3a71058bd7b2d22fe1f","dweb:/ipfs/QmRKZjNZ5TVYh6yZH8tLjpPfh3D76ezXrwTmjUSM5jRqpu"]}},"version":1}',
        bytecode: '0x608060405234801561001057600080fd5b5060408051808201909152600e81526d48656c6c6f20576f726c6421212160901b602082015261003f90610044565b61027b565b336000818152600160208181526040808420548151606081018352818152808401888152818401879052968652858452828620828752845291909420815181559451805194959194919361009e9390850192910190610119565b50604091820151600291909101805460ff1916911515919091179055517f05d0fb833127fc08168556d0e7ca9554fc3f6bc843b3b7d2bf1c35aea6bab660906100ed90839085906000906101b2565b60405180910390a133600090815260016020526040812080549161011083610217565b91905055505050565b82805461012590610240565b90600052602060002090601f016020900481019282610147576000855561018d565b82601f1061016057805160ff191683800117855561018d565b8280016001018555821561018d579182015b8281111561018d578251825591602001919060010190610172565b5061019992915061019d565b5090565b5b80821115610199576000815560010161019e565b83815260006020606081840152845180606085015260005b818110156101e6578681018301518582016080015282016101ca565b818111156101f8576000608083870101525b5093151560408401525050601f91909101601f19160160800192915050565b600060001982141561023957634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061025457607f821691505b6020821081141561027557634e487b7160e01b600052602260045260246000fd5b50919050565b6106a78061028a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063111002aa14610051578063455f5024146100665780637149d2e4146100795780637b219c39146100a4575b600080fd5b61006461005f366004610476565b6100d2565b005b610064610074366004610527565b6101a7565b61008c61008736600461055c565b610311565b60405161009b93929190610586565b60405180910390f35b6100c46100b23660046105eb565b60016020526000908152604090205481565b60405190815260200161009b565b336000818152600160208181526040808420548151606081018352818152808401888152818401879052968652858452828620828752845291909420815181559451805194959194919361012c93908501929101906103c7565b50604091820151600291909101805460ff1916911515919091179055517f05d0fb833127fc08168556d0e7ca9554fc3f6bc843b3b7d2bf1c35aea6bab6609061017b9083908590600090610586565b60405180910390a133600090815260016020526040812080549161019e8361060d565b91905055505050565b3360009081526020818152604080832084845282528083208151606081019092528054825260018101805492939192918401916101e390610636565b80601f016020809104026020016040519081016040528092919081815260200182805461020f90610636565b801561025c5780601f106102315761010080835404028352916020019161025c565b820191906000526020600020905b81548152906001019060200180831161023f57829003601f168201915b50505091835250506002919091015460ff1615156020918201526040808301805115905233600090815280835281812086825283522082518155828201518051939450849391926102b5926001850192909101906103c7565b50604091820151600291909101805460ff191691151591909117905581810151815184815290151560208201527fe668c7a227d9261aa1f964bf5a852ab642446a7af6c29405caf8d0e9ce2c11f0910160405180910390a15050565b60006020818152928152604080822090935290815220805460018201805491929161033b90610636565b80601f016020809104026020016040519081016040528092919081815260200182805461036790610636565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050506002909301549192505060ff1683565b8280546103d390610636565b90600052602060002090601f0160209004810192826103f5576000855561043b565b82601f1061040e57805160ff191683800117855561043b565b8280016001018555821561043b579182015b8281111561043b578251825591602001919060010190610420565b5061044792915061044b565b5090565b5b80821115610447576000815560010161044c565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561048857600080fd5b813567ffffffffffffffff808211156104a057600080fd5b818401915084601f8301126104b457600080fd5b8135818111156104c6576104c6610460565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610460565b8160405282815287602084870101111561050757600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561053957600080fd5b5035919050565b80356001600160a01b038116811461055757600080fd5b919050565b6000806040838503121561056f57600080fd5b61057883610540565b946020939093013593505050565b83815260006020606081840152845180606085015260005b818110156105ba5786810183015185820160800152820161059e565b818111156105cc576000608083870101525b5093151560408401525050601f91909101601f19160160800192915050565b6000602082840312156105fd57600080fd5b61060682610540565b9392505050565b600060001982141561062f57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061064a57607f821691505b6020821081141561066b57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122013e95e77ae870b7b1aa9c16645ddfa33e5baf187b9b319d9f336806cb7d89a4364736f6c634300080b0033',
        deployedBytecode: '0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063111002aa14610051578063455f5024146100665780637149d2e4146100795780637b219c39146100a4575b600080fd5b61006461005f366004610476565b6100d2565b005b610064610074366004610527565b6101a7565b61008c61008736600461055c565b610311565b60405161009b93929190610586565b60405180910390f35b6100c46100b23660046105eb565b60016020526000908152604090205481565b60405190815260200161009b565b336000818152600160208181526040808420548151606081018352818152808401888152818401879052968652858452828620828752845291909420815181559451805194959194919361012c93908501929101906103c7565b50604091820151600291909101805460ff1916911515919091179055517f05d0fb833127fc08168556d0e7ca9554fc3f6bc843b3b7d2bf1c35aea6bab6609061017b9083908590600090610586565b60405180910390a133600090815260016020526040812080549161019e8361060d565b91905055505050565b3360009081526020818152604080832084845282528083208151606081019092528054825260018101805492939192918401916101e390610636565b80601f016020809104026020016040519081016040528092919081815260200182805461020f90610636565b801561025c5780601f106102315761010080835404028352916020019161025c565b820191906000526020600020905b81548152906001019060200180831161023f57829003601f168201915b50505091835250506002919091015460ff1615156020918201526040808301805115905233600090815280835281812086825283522082518155828201518051939450849391926102b5926001850192909101906103c7565b50604091820151600291909101805460ff191691151591909117905581810151815184815290151560208201527fe668c7a227d9261aa1f964bf5a852ab642446a7af6c29405caf8d0e9ce2c11f0910160405180910390a15050565b60006020818152928152604080822090935290815220805460018201805491929161033b90610636565b80601f016020809104026020016040519081016040528092919081815260200182805461036790610636565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050506002909301549192505060ff1683565b8280546103d390610636565b90600052602060002090601f0160209004810192826103f5576000855561043b565b82601f1061040e57805160ff191683800117855561043b565b8280016001018555821561043b579182015b8281111561043b578251825591602001919060010190610420565b5061044792915061044b565b5090565b5b80821115610447576000815560010161044c565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561048857600080fd5b813567ffffffffffffffff808211156104a057600080fd5b818401915084601f8301126104b457600080fd5b8135818111156104c6576104c6610460565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610460565b8160405282815287602084870101111561050757600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561053957600080fd5b5035919050565b80356001600160a01b038116811461055757600080fd5b919050565b6000806040838503121561056f57600080fd5b61057883610540565b946020939093013593505050565b83815260006020606081840152845180606085015260005b818110156105ba5786810183015185820160800152820161059e565b818111156105cc576000608083870101525b5093151560408401525050601f91909101601f19160160800192915050565b6000602082840312156105fd57600080fd5b61060682610540565b9392505050565b600060001982141561062f57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061064a57607f821691505b6020821081141561066b57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122013e95e77ae870b7b1aa9c16645ddfa33e5baf187b9b319d9f336806cb7d89a4364736f6c634300080b0033',
        immutableReferences: {},
        generatedSources: [Array],
        deployedGeneratedSources: [Array],
        sourceMap: '60:1008:1:-:0;;;482:61;;;;;;;;;-1:-1:-1;507:28:1;;;;;;;;;;;;-1:-1:-1;;;507:28:1;;;;;;:10;:28::i;:::-;60:1008;;551:273;641:10;613:14;630:22;;;:10;:22;;;;;;;;;694:32;;;;;;;;;;;;;;;;;;;;;;663:17;;;;;;;;;:28;;;;;;;;;:63;;;;;;;;630:22;;694:32;;663:28;;:63;;;;;;;;;;:::i;:::-;-1:-1:-1;663:63:1;;;;;;;;;;;;-1:-1:-1;;663:63:1;;;;;;;;;;742:39;;;;;754:9;;765:8;;-1:-1:-1;;742:39:1;:::i;:::-;;;;;;;;803:10;792:22;;;;:10;:22;;;;;:24;;;;;;:::i;:::-;;;;;;602:222;551:273;:::o;60:1008::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1008:1;;;-1:-1:-1;60:1008:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:752:3;213:6;202:9;195:25;176:4;239:2;277;272;261:9;257:18;250:30;309:6;303:13;352:6;347:2;336:9;332:18;325:34;377:1;387:141;401:6;398:1;395:13;387:141;;;497:14;;;493:23;;487:30;462:17;;;481:3;458:27;451:67;416:10;;387:141;;;546:6;543:1;540:13;537:92;;;617:1;611:3;602:6;591:9;587:22;583:32;576:43;537:92;-1:-1:-1;744:14:3;;737:22;732:2;717:18;;710:50;-1:-1:-1;;690:2:3;669:15;;;;-1:-1:-1;;665:29:3;650:45;697:3;646:55;;14:752;-1:-1:-1;;14:752:3:o;771:232::-;810:3;-1:-1:-1;;831:17:3;;828:140;;;890:10;885:3;881:20;878:1;871:31;925:4;922:1;915:15;953:4;950:1;943:15;828:140;-1:-1:-1;995:1:3;984:13;;771:232::o;1008:380::-;1087:1;1083:12;;;;1130;;;1151:61;;1205:4;1197:6;1193:17;1183:27;;1151:61;1258:2;1250:6;1247:14;1227:18;1224:38;1221:161;;;1304:10;1299:3;1295:20;1292:1;1285:31;1339:4;1336:1;1329:15;1367:4;1364:1;1357:15;1221:161;;1008:380;;;:::o;:::-;60:1008:1;;;;;;',
        deployedSourceMap: '60:1008:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;551:273;;;;;;:::i;:::-;;:::i;:::-;;832:233;;;;;;:::i;:::-;;:::i;368:54::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;429:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2789:25:3;;;2777:2;2762:18;429:42:1;2643:177:3;551:273:1;641:10;613:14;630:22;;;:10;:22;;;;;;;;;694:32;;;;;;;;;;;;;;;;;;;;;;663:17;;;;;;;;;:28;;;;;;;;;:63;;;;;;;;630:22;;694:32;;663:28;;:63;;;;;;;;;;:::i;:::-;-1:-1:-1;663:63:1;;;;;;;;;;;;-1:-1:-1;;663:63:1;;;;;;;;;;742:39;;;;;754:9;;765:8;;-1:-1:-1;;742:39:1;:::i;:::-;;;;;;;;803:10;792:22;;;;:10;:22;;;;;:24;;;;;;:::i;:::-;;;;;;602:222;551:273;:::o;832:233::-;910:10;885:16;904:17;;;;;;;;;;;:22;;;;;;;;885:41;;;;;;;;;;;;;;;;;;;904:22;;885:41;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;885:41:1;;;-1:-1:-1;;885:41:1;;;;;;;;;;;;;;;955:14;;;;;;954:15;937:32;;986:10;885:41;980:17;;;;;;;;;:22;;;;;;:29;;;;;;;;;;885:41;;-1:-1:-1;885:41:1;;980:22;;:29;;885:41;980:29;;;;;;;;:::i;:::-;-1:-1:-1;980:29:1;;;;;;;;;;;;-1:-1:-1;;980:29:1;;;;;;;;;;1042:14;;;;1025:32;;3615:25:3;;;3683:14;;3676:22;3671:2;3656:18;;3649:50;1025:32:1;;3588:18:3;1025:32:1;;;;;;;874:191;832:233;:::o;368:54::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;368:54:1;;;;;;;-1:-1:-1;;368:54:1;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:3;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:922;215:6;268:2;256:9;247:7;243:23;239:32;236:52;;;284:1;281;274:12;236:52;324:9;311:23;353:18;394:2;386:6;383:14;380:34;;;410:1;407;400:12;380:34;448:6;437:9;433:22;423:32;;493:7;486:4;482:2;478:13;474:27;464:55;;515:1;512;505:12;464:55;551:2;538:16;573:2;569;566:10;563:36;;;579:18;;:::i;:::-;654:2;648:9;622:2;708:13;;-1:-1:-1;;704:22:3;;;728:2;700:31;696:40;684:53;;;752:18;;;772:22;;;749:46;746:72;;;798:18;;:::i;:::-;838:10;834:2;827:22;873:2;865:6;858:18;913:7;908:2;903;899;895:11;891:20;888:33;885:53;;;934:1;931;924:12;885:53;990:2;985;981;977:11;972:2;964:6;960:15;947:46;1035:1;1013:15;;;1030:2;1009:24;1002:35;;;;-1:-1:-1;1017:6:3;146:922;-1:-1:-1;;;;;146:922:3:o;1073:180::-;1132:6;1185:2;1173:9;1164:7;1160:23;1156:32;1153:52;;;1201:1;1198;1191:12;1153:52;-1:-1:-1;1224:23:3;;1073:180;-1:-1:-1;1073:180:3:o;1258:173::-;1326:20;;-1:-1:-1;;;;;1375:31:3;;1365:42;;1355:70;;1421:1;1418;1411:12;1355:70;1258:173;;;:::o;1436:254::-;1504:6;1512;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;1604:29;1623:9;1604:29;:::i;:::-;1594:39;1680:2;1665:18;;;;1652:32;;-1:-1:-1;;;1436:254:3:o;1695:752::-;1894:6;1883:9;1876:25;1857:4;1920:2;1958;1953;1942:9;1938:18;1931:30;1990:6;1984:13;2033:6;2028:2;2017:9;2013:18;2006:34;2058:1;2068:141;2082:6;2079:1;2076:13;2068:141;;;2178:14;;;2174:23;;2168:30;2143:17;;;2162:3;2139:27;2132:67;2097:10;;2068:141;;;2227:6;2224:1;2221:13;2218:92;;;2298:1;2292:3;2283:6;2272:9;2268:22;2264:32;2257:43;2218:92;-1:-1:-1;2425:14:3;;2418:22;2413:2;2398:18;;2391:50;-1:-1:-1;;2371:2:3;2350:15;;;;-1:-1:-1;;2346:29:3;2331:45;2378:3;2327:55;;1695:752;-1:-1:-1;;1695:752:3:o;2452:186::-;2511:6;2564:2;2552:9;2543:7;2539:23;2535:32;2532:52;;;2580:1;2577;2570:12;2532:52;2603:29;2622:9;2603:29;:::i;:::-;2593:39;2452:186;-1:-1:-1;;;2452:186:3:o;2825:232::-;2864:3;-1:-1:-1;;2885:17:3;;2882:140;;;2944:10;2939:3;2935:20;2932:1;2925:31;2979:4;2976:1;2969:15;3007:4;3004:1;2997:15;2882:140;-1:-1:-1;3049:1:3;3038:13;;2825:232::o;3062:380::-;3141:1;3137:12;;;;3184;;;3205:61;;3259:4;3251:6;3247:17;3237:27;;3205:61;3312:2;3304:6;3301:14;3281:18;3278:38;3275:161;;;3358:10;3353:3;3349:20;3346:1;3339:31;3393:4;3390:1;3383:15;3421:4;3418:1;3411:15;3275:161;;3062:380;;;:::o',
        source: '// SPDX-License-Identifier: MIT\r\n' +
          'pragma solidity ^0.8.0;\r\n' +
          '\r\n' +
          'contract TodoList {\r\n' +
          '\r\n' +
          '    \r\n' +
          '    struct Task {\r\n' +
          '        uint id;\r\n' +
          '        string content;\r\n' +
          '        bool completed;\r\n' +
          '    }\r\n' +
          '\r\n' +
          '    event TaskCreated (\r\n' +
          '        uint id,\r\n' +
          '        string content,\r\n' +
          '        bool completed\r\n' +
          '    );\r\n' +
          '\r\n' +
          '    event TaskToggled (\r\n' +
          '        uint id,\r\n' +
          '        bool completed\r\n' +
          '    );\r\n' +
          '\r\n' +
          '    mapping(address => mapping(uint => Task)) public tasks;\r\n' +
          '    mapping(address => uint) public tasksCount;\r\n' +
          '\r\n' +
          '\r\n' +
          '    constructor() {\r\n' +
          '        createTask("Hello World!!!");\r\n' +
          '    }\r\n' +
          '\r\n' +
          '    function createTask(string memory _content) public {\r\n' +
          '        uint taskCount = tasksCount[msg.sender];\r\n' +
          '        tasks[msg.sender][taskCount] = Task(taskCount, _content, false);\r\n' +
          '        emit TaskCreated(taskCount, _content, false);\r\n' +
          '        tasksCount[msg.sender]++;\r\n' +
          '    }\r\n' +
          '\r\n' +
          '    function toggleCompleted(uint _id) public {\r\n' +
          '        Task memory task = tasks[msg.sender][_id];\r\n' +
          '        task.completed = !task.completed;\r\n' +
          '        tasks[msg.sender][_id] = task;\r\n' +
          '        emit TaskToggled(_id, task.completed);\r\n' +
          '    }\r\n' +
          '}',
        sourcePath: 'D:\\jsProject\\todo-list\\contracts\\TodoList.sol',
        ast: [Object],
        legacyAST: [Object],
        compiler: [Object],
        networks: [Object],
        schemaVersion: '3.4.5',
        updatedAt: '2022-04-15T02:52:23.553Z',
        networkType: 'ethereum',
        devdoc: [Object],
        userdoc: [Object],
        db: undefined
      },
      configureNetwork: [Function: bound configureNetwork],
      setProvider: [Function: bound setProvider],
      new: [Function: bound new] {
        estimateGas: [Function: bound estimateDeployment],
        request: [Function: bound requestDeployment]
      },
      at: [Function: bound at] AsyncFunction,
      deployed: [Function: bound deployed] AsyncFunction,
      defaults: [Function: bound defaults],
      hasNetwork: [Function: bound hasNetwork],
      isDeployed: [Function: bound isDeployed],
      detectNetwork: [Function: bound detectNetwork] AsyncFunction,
      setNetwork: [Function: bound setNetwork],
      setNetworkType: [Function: bound setNetworkType],
      setWallet: [Function: bound setWallet],
      resetAddress: [Function: bound resetAddress],
      link: [Function: bound link],
      clone: [Function: bound clone],
      addProp: [Function: bound addProp],
      toJSON: [Function: bound toJSON],
      decodeLogs: [Function: bound decodeLogs],
      enums: {},
      class_defaults: { from: '0x736552481f73dd19C81E825D90D56046a5807838' },
      interfaceAdapter: Web3InterfaceAdapter { web3: [Web3Shim] },
      web3: Web3Shim {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [HttpProvider],
        setProvider: [Function (anonymous)],
        setRequestManager: [Function (anonymous)],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        version: '1.5.3',
        utils: [Object],
        eth: [Eth],
        shh: [Shh],
        bzz: [Bzz],
        networkType: 'ethereum'
      },
      currentProvider: HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: true,
        host: 'http://127.0.0.1:7545',
        httpAgent: [Agent],
        send: [Function (anonymous)],
        _alreadyWrapped: true
      },
      network_id: '5777',
      disableConfirmationListener: undefined,
      ens: { enabled: false, registryAddress: null }
    },
    methods: {
      'tasks(address,uint256)': [Function (anonymous)] {
        call: [Function (anonymous)],
        sendTransaction: [Function (anonymous)],
        estimateGas: [Function (anonymous)],
        request: [Function (anonymous)]
      },
      'tasksCount(address)': [Function (anonymous)] {
        call: [Function (anonymous)],
        sendTransaction: [Function (anonymous)],
        estimateGas: [Function (anonymous)],
        request: [Function (anonymous)]
      },
      'createTask(string)': [Function (anonymous)] {
        call: [Function (anonymous)],
        sendTransaction: [Function (anonymous)],
        estimateGas: [Function (anonymous)],
        request: [Function (anonymous)]
      },
      'toggleCompleted(uint256)': [Function (anonymous)] {
        call: [Function (anonymous)],
        sendTransaction: [Function (anonymous)],
        estimateGas: [Function (anonymous)],
        request: [Function (anonymous)]
      }
    },
    abi: [
      {
        inputs: [],
        stateMutability: 'nonpayable',
        type: 'constructor',
        constant: undefined,
        payable: undefined
      },
      {
        anonymous: false,
        inputs: [Array],
        name: 'TaskCreated',
        type: 'event',
        constant: undefined,
        payable: undefined,
        signature: '0x05d0fb833127fc08168556d0e7ca9554fc3f6bc843b3b7d2bf1c35aea6bab660'
      },
      {
        anonymous: false,
        inputs: [Array],
        name: 'TaskToggled',
        type: 'event',
        constant: undefined,
        payable: undefined,
        signature: '0xe668c7a227d9261aa1f964bf5a852ab642446a7af6c29405caf8d0e9ce2c11f0'
      },
      {
        inputs: [Array],
        name: 'tasks',
        outputs: [Array],
        stateMutability: 'view',
        type: 'function',
        constant: true,
        payable: undefined,
        signature: '0x7149d2e4'
      },
      {
        inputs: [Array],
        name: 'tasksCount',
        outputs: [Array],
        stateMutability: 'view',
        type: 'function',
        constant: true,
        payable: undefined,
        signature: '0x7b219c39'
      },
      {
        inputs: [Array],
        name: 'createTask',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
        constant: undefined,
        payable: undefined,
        signature: '0x111002aa'
      },
      {
        inputs: [Array],
        name: 'toggleCompleted',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
        constant: undefined,
        payable: undefined,
        signature: '0x455f5024'
      }
    ],
    address: '0x42Cfe7560a4849D4084fCE3e2c109059ab917026',
    transactionHash: undefined,
    contract: Contract {
      setProvider: [Function (anonymous)],
      currentProvider: [Getter/Setter],
      _requestManager: RequestManager {
        provider: [HttpProvider],
        providers: [Object],
        subscriptions: Map(0) {}
      },
      givenProvider: null,
      providers: {
        WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider]
      },
      _provider: HttpProvider {
        withCredentials: false,
        timeout: 0,
        headers: undefined,
        agent: undefined,
        connected: true,
        host: 'http://127.0.0.1:7545',
        httpAgent: [Agent],
        send: [Function (anonymous)],
        _alreadyWrapped: true
      },
      setRequestManager: [Function (anonymous)],
      BatchRequest: [Function: bound Batch],
      extend: [Function: ex] {
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method]
      },
      clearSubscriptions: [Function (anonymous)],
      options: { address: [Getter/Setter], jsonInterface: [Getter/Setter] },
      handleRevert: [Getter/Setter],
      defaultCommon: [Getter/Setter],
      defaultHardfork: [Getter/Setter],
      defaultChain: [Getter/Setter],
      transactionPollingTimeout: [Getter/Setter],
      transactionConfirmationBlocks: [Getter/Setter],
      transactionBlockTimeout: [Getter/Setter],
      defaultAccount: [Getter/Setter],
      defaultBlock: [Getter/Setter],
      methods: {
        tasks: [Function: bound _createTxObject],
        '0x7149d2e4': [Function: bound _createTxObject],
        'tasks(address,uint256)': [Function: bound _createTxObject],
        tasksCount: [Function: bound _createTxObject],
        '0x7b219c39': [Function: bound _createTxObject],
        'tasksCount(address)': [Function: bound _createTxObject],
        createTask: [Function: bound _createTxObject],
        '0x111002aa': [Function: bound _createTxObject],
        'createTask(string)': [Function: bound _createTxObject],
        toggleCompleted: [Function: bound _createTxObject],
        '0x455f5024': [Function: bound _createTxObject],
        'toggleCompleted(uint256)': [Function: bound _createTxObject]
      },
      events: {
        TaskCreated: [Function: bound ],
        '0x05d0fb833127fc08168556d0e7ca9554fc3f6bc843b3b7d2bf1c35aea6bab660': [Function: bound ],
        'TaskCreated(uint256,string,bool)': [Function: bound ],
        TaskToggled: [Function: bound ],
        '0xe668c7a227d9261aa1f964bf5a852ab642446a7af6c29405caf8d0e9ce2c11f0': [Function: bound ],
        'TaskToggled(uint256,bool)': [Function: bound ],
        allEvents: [Function: bound ]
      },
      _address: '0x42Cfe7560a4849D4084fCE3e2c109059ab917026',
      _jsonInterface: [
        [Object], [Object],
        [Object], [Object],
        [Object], [Object],
        [Object]
      ]
    },
    TaskCreated: [Function (anonymous)],
    TaskToggled: [Function (anonymous)],
    tasks: [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    tasksCount: [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    createTask: [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    toggleCompleted: [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    sendTransaction: [Function (anonymous)],
    send: [Function (anonymous)],
    allEvents: [Function (anonymous)],
    getPastEvents: [Function (anonymous)]
  }